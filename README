Slickback integrates Backbone and SlickGrid, extending Backbone 
collections to support pagination and filtering ("scoping"), and
adapting them to serve as SlickGrid "DataView" objects.

The easiest way to use Slickback is to extend Slickback.PaginatedCollection 
rather than Backbone.Collection, e.g.:

  var productsCollection = Slickback.PaginatedCollection.extend({
    model: Product,
    url:   '/products'
  });

An instance of the collection can be passed to Slick.Grid's constructor:

  var products = new productsCollection();
  var gridOptions = {
    formatterFactory: Slickback.BackboneModelFormatterFactory
  };
  var grid = new Slick.Grid('#grid',products,productColumns,gridOptions);

BackboneModelFormatterFactory makes the grid use Backbone.Model's "get"
method to retrieve field values, which otherwise would be treated as
model object attributes.

The collection can also be used with a Slick.Controls.Pager:

  var pager = new Slick.Controls.Pager(products,grid,$('#pager'));

The pager subscribes to "onPagingInfoChanged" notifications, which the
collection will publish when it receives new pagination parameters from 
a fetch. It is also possible to subscribe to the "onRowCountChanged" and 
"onRowsChanged" notifications which can be used to update the grid with
the state of the collection:

  products.onRowCountChanged.subscribe(function() {
    grid.updateRowCount();
    grid.render();
  });

  products.onRowsChanged.subscribe(function() {
    grid.removeAllRows();
    grid.render();
  });

Slickback assumes pagination parameters (both those passed to the
collection data source and those received from the data source)
follow a naming convention similar to that used by Ruby's WillPaginate
library. The page number and size are passed to the collection's
fetch method as "page" and "per_page". A standard Backbone collection
will apply these parameters to the query string used to fetch the
collection. The response is expected to be an object (rather than an
array) including the following parameters: "entries" (the list of models),
"currentPage", "perPage", and "totalEntries". Sample code for serializing
WillPaginate collections with these parameters is provided in the example
directory. This code can be installed as a rails initializer.

Slickback was developed with Backbone v0.5.3 and SlickGrid v1.4.3,
and may or may not work with other versions of these libraries.
Compatibility patches are welcome.

Slickback is hosted on github:

  http://github.com/teleological/slickback

To report a bug or suggest a feature:

  http://github.com/teleological/slickback/issues

Thanks to Jeremy Ashkenas and Michael Leibman for Backbone and SlickGrid,
and to Pivotal Labs and Benjamin Arthur Lupton for the Jasmine and
Buildr tools used to test and build Slickback.
